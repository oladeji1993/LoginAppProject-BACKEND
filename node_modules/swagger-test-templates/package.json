{
  "_args": [
    [
      {
        "raw": "swagger-test-templates@^1.2.0",
        "scope": null,
        "escapedName": "swagger-test-templates",
        "name": "swagger-test-templates",
        "rawSpec": "^1.2.0",
        "spec": ">=1.2.0 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\olani\\Desktop\\huroku Api\\node_modules\\swagger"
    ]
  ],
  "_from": "swagger-test-templates@^1.2.0",
  "_hasShrinkwrap": false,
  "_id": "swagger-test-templates@1.6.0",
  "_location": "/swagger-test-templates",
  "_nodeVersion": "11.8.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/swagger-test-templates_1.6.0_1571156557815_0.6639492831702409"
  },
  "_npmUser": {
    "name": "noahdietz",
    "email": "noahdietz24@gmail.com"
  },
  "_npmVersion": "6.5.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "swagger-test-templates@^1.2.0",
    "scope": null,
    "escapedName": "swagger-test-templates",
    "name": "swagger-test-templates",
    "rawSpec": "^1.2.0",
    "spec": ">=1.2.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/swagger"
  ],
  "_resolved": "https://registry.npmjs.org/swagger-test-templates/-/swagger-test-templates-1.6.0.tgz",
  "_shasum": "5353614f39b56b392f8e509e35580a8a7febb69e",
  "_shrinkwrap": null,
  "_spec": "swagger-test-templates@^1.2.0",
  "_where": "C:\\Users\\olani\\Desktop\\huroku Api\\node_modules\\swagger",
  "bugs": {
    "url": "https://github.com/apigee-127/swagger-test-templates/issues"
  },
  "dependencies": {
    "handlebars": "^4.0.5",
    "js-string-escape": "^1.0.1",
    "json-schema-deref-sync": "^0.6.0",
    "lodash": "^4.17.12",
    "sanitize-filename": "^1.3.0",
    "string": "^3.3.0"
  },
  "description": "Generate test code from a Swagger spec",
  "devDependencies": {
    "chai": "^3.0.0",
    "dotenv": "^1.2.0",
    "eslint": "^0.24.0",
    "js-yaml": "^3.3.1",
    "mocha": "^2.2.5",
    "mocha-eslint": "^0.1.7",
    "ncp": "^2.0.0",
    "rewire": "^2.3.4",
    "walk": "^2.3.9",
    "z-schema": "^3.12.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-yWlUYlxT6FjVSvWJbHCMnAAAShSYdGvk1V1hd78Huey08Ra1Vzl8kIhhdExQ5+oLVzMrQE/FIm8fOtNjRXQqjA==",
    "shasum": "5353614f39b56b392f8e509e35580a8a7febb69e",
    "tarball": "https://registry.npmjs.org/swagger-test-templates/-/swagger-test-templates-1.6.0.tgz",
    "fileCount": 165,
    "unpackedSize": 489346,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdpfJOCRA9TVsSAnZWagAAr+MP/RX53GyLf3oM7sb3QZMf\nGR2tbzC9QEhwFrYHenul8mN6NqEOZ/5BV5AKLUns5wuPUy1HBAY85fvmvxYD\n7dMQutwQsWSRZlp/V5MjuA/P96jIdj7pGdFhn99m8rmwCwR7BxveYTO7BbtP\nVw4x+GxebSExwTrfpFSv+zmbcx0sfK3wnF2XTbnet8Eiyo0kFWmMWtPMmkMj\nwfNzfVGOE8sKNmURfZJ0ySA0tvy/48odTunr91pTmCmXz8jjWtt+HLWvD65m\nghjGpEatyVih9e/2L8nLYqCgEnQJt2bM6GezqpV52yBvIjEUaHx9PVogCx6f\nCQ7CIstFcRK3StExMpAzc5uqpQjgkxC6ivTL0OQqPeZboX5SWu11zBSDtFvY\nqk1P/sK1YlpvmVI96UEl5GXwpJcxLDGGbnhBWtG59bpHazwfleEGZPOfGB3n\nGwGDH18EcTH7ELsCfAunWPNaqh0nZuz4WDycPNBs6kT5ZEJWSJQ/jnQp0idh\nvfItic5JxnsaS1PIbWnRr12KAhnM+NH384fY+sfMjG/UUDWTtPiCsWt1P0mp\norwVHyQH/lmCE2MLWs7SpRAeZdYmtkDzwhHfdr//L+H6iNIIEIy0Sqv9QNpD\nEuIB3DNUd3NKIQZuirOfNcTE+Bigjt7r+JCaNStAVYAINkRJVZgdZX8YCPZK\ndSEg\r\n=h1WI\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=6.0.0"
  },
  "gitHead": "24a109434cefd020d45f37d9a05058bc564f2a52",
  "homepage": "https://github.com/apigee-127/swagger-test-templates#readme",
  "keywords": [
    "Swagger",
    "API",
    "Test"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "elsapeng",
      "email": "elsa.peng@hotmail.com"
    },
    {
      "name": "mohsen",
      "email": "me@azimi.me"
    },
    {
      "name": "noahdietz",
      "email": "noahdietz24@gmail.com"
    },
    {
      "name": "swagger",
      "email": "mazimi+swagger@apigee.com"
    }
  ],
  "name": "swagger-test-templates",
  "optionalDependencies": {},
  "readme": "# Swagger Test Templates\n\n| Linux | Windows |\n| ----- | ------- |\n| [![Build Status](https://travis-ci.org/apigee-127/swagger-test-templates.svg?branch=master)](https://travis-ci.org/apigee-127/swagger-test-templates) | [![Build Status](https://ci.appveyor.com/api/projects/status/github/apigee-127/swagger-test-templates?svg=true&branch=master)](https://ci.appveyor.com/project/noahdietz/swagger-test-templates) |\n\n> Generate test code from a [Swagger](http://swagger.io) spec(version 2.0)\n\n## Usage\n\nInstall via npm\n\n```bash\nnpm install --save swagger-test-templates\n```\n\nUse your [Swagger](http://swagger.io) API spec file to generate test for your API.\n\n```javascript\nvar stt = require('swagger-test-templates');\nvar swagger = require('/path/to/swagger.json');\nvar config = {\n  assertionFormat: 'should',\n  testModule: 'supertest',\n  pathName: ['/user', '/user/{id}'],\n  loadTest: [{pathName:'/user', operation:'get', load:{requests: 1000, concurrent: 100}}, { /* ... */ }],\n  maxLen: 80,\n  pathParams: {\n    \"id\": \"0123\"\n  }\n};\n\n// Generates an array of objects containing the test file content, following specified configuration\n// the array contains objects with the scheme { name: <test-file-name>, test: <test-file-content> }\n// tests = [ {name: base-path-test.js, test: ... }, {name: users-test.js, test: ... }]\nvar tests = stt.testGen(swagger, config);\n```\n\n## API\n\n`swagger-test-templates` module exports a function with following arguments and return values:\n\n### Arguments\n\n* **`assertionFormat`** *required*: One of `should`, `expect` or `assert`. Choose which assertion method should be used in output test code.\n* **`testModule`** *required*: One of `supertest` or `request`. Choose between direct API calls (`request`) vs. programatic access to your API (`supertest`).\n* **`pathName`** *required*: List of path names available in your Swagger API spec used to generate tests for. Empty array leads to **all paths**.\n* **`statusCodes`** *optional* Array with status codes to generate tests for. Useful for generating only happy-flow tests. Excluding this param will generate tests for all responses. A test is generated for the status code only when the status code is listed in the Swagger API spec.\n* **`loadTest`** *optional*: List of objects info in your Swagger API spec used to generate stress tests. If specify, pathName & operation are **required**. Optional fields requests defaults to `1000`, concurrent defaults to `100`.\n* **`maxLen`** *optional*: Maximum line length. If set to `-1`, descriptions will not be truncated. Defaults to `80`.\n* **`pathParams`** *optional*: Object containing the values of a specific path parameters.\n* **`templatesPath`** *optional* String indicating a custom handlebars-template path for generating the tests. Note: copy all the templates to your custom directory, this is a 'all-or-nothing' path\n* **`requestData`** *optional* Object containing data to send with the request See section on requestData for more details\n\n### Return value\n\nAn array in which each string is content of a test file and the file name. Use this information to write those files to disk.\n\n## Sending requestData\n\nBased on your schema there are a few modules out there that allow you to generate mock request payloads.\nYou can send this mock data along with the tests generated by this module by filling the `requestData` property of the module.\nThe mock data needs to have the following structure:\n\n### Mock HTTP request body\n\n```javascript\n{\n   '/endpoint': {\n       operation: {\n           'responseCode': [{ body: {}, description:'some description of the data'}]\n       }\n   }\n }\n\n```\n\n### Mock Path Parameters\n\n```javascript\n{\n   '/pet/{name}': {\n       get: {\n           '200': [{ name: 'spot', description:'some description of the data'}]\n       }\n   }\n }\n\n```\n\n### Mock Query Parameters\n\nThis will make a request to `/pet?name=spot` assuming that your swagger API has a definition for a `name` query parameter.\n\n```javascript\n{\n   '/pet': {\n       get: {\n           '200': [{ name: 'spot', description:'some description of the data'}]\n       }\n   }\n }\n\n```\n\n### Mock HTTP Headers\n\nThis will add an HTTP header `X-Token` set to `waestrydtufj` assuming that your swagger API has a definition for that header.\n\n```javascript\n{\n   '/pet': {\n       get: {\n           '200': [{ 'X-Token': 'waestrydtufj', description:'some description of the data'}]\n       }\n   }\n }\n\n```\n\nMultiple objects within a status code request data array are supported. So, for example this could be:\n\n```javascript\n{\n     '/pet': {\n         post: {\n             '200': [\n               {\n                 body: {\n                  id: 1,\n                  otherProperty: 'some property that is a string'\n                 },\n                 description: 'the description for this data'\n               },\n               {\n                 body: {\n                  id: 2,\n                  otherProperty: 'another value of that property'\n                 },\n                 description: 'the description for another data'\n               }\n             ]\n         },\n         get: {\n            '200': [\n              {\n                guid: 'some_string_to_place_in_path',\n                anotherPathParam: 100,\n                description: 'valid path or query parameters'\n              },\n              {\n                guid: 'some_other_string_to_place_in_path',\n                anotherPathParam: 200,\n                description: 'another valid path or query parameters'\n              }\n          ]\n         }\n     }\n }\n```\n\nNote: for get-requests matching data will be transferred to the pathParams. So setting config.pathParams directly will have the same effect (see above).\n\nEvery mockData item in the `responseCode` array will be used to generate a test. The description will be added to the \"it\" function for reference.\n\nParameters explicitly marked as `required: false` in your Swagger API spec, will only be set if there is a matching value in requestData object. Required parameters and parameters without explicitly set `required` flag in Swagger API spec will be set to either a matching value in requestData object or 'DATA GOES HERE' string.\n\n## License\n\n[MIT](/LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/apigee-127/swagger-test-templates.git"
  },
  "scripts": {
    "pretest": "npm install && node pretest.js",
    "test": "node mocha.js"
  },
  "swagger-test-templates@1.0.0": [
    {
      "name": "Mohsen Azimi",
      "email": "me@azimi.me",
      "url": "http://azimi.me"
    },
    {
      "name": "Linjie Peng",
      "email": "elsa.peng@hotmail.com"
    },
    {
      "name": "Noah Dietz",
      "email": "noahdietz24@gmail.com"
    }
  ],
  "version": "1.6.0"
}
