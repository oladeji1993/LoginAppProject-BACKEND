{
  "_args": [
    [
      {
        "raw": "@apidevtools/json-schema-ref-parser@^9.0.6",
        "scope": "@apidevtools",
        "escapedName": "@apidevtools%2fjson-schema-ref-parser",
        "name": "@apidevtools/json-schema-ref-parser",
        "rawSpec": "^9.0.6",
        "spec": ">=9.0.6 <10.0.0",
        "type": "range"
      },
      "C:\\Users\\olani\\Desktop\\huroku Api\\node_modules\\@apidevtools\\swagger-parser"
    ]
  ],
  "_from": "@apidevtools/json-schema-ref-parser@^9.0.6",
  "_hasShrinkwrap": false,
  "_id": "@apidevtools/json-schema-ref-parser@9.0.7",
  "_location": "/@apidevtools/json-schema-ref-parser",
  "_nodeVersion": "10.23.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/json-schema-ref-parser_9.0.7_1610965937502_0.7871133222537585"
  },
  "_npmUser": {
    "name": "jamesmessinger",
    "email": "james.messinger@gmail.com"
  },
  "_npmVersion": "6.14.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@apidevtools/json-schema-ref-parser@^9.0.6",
    "scope": "@apidevtools",
    "escapedName": "@apidevtools%2fjson-schema-ref-parser",
    "name": "@apidevtools/json-schema-ref-parser",
    "rawSpec": "^9.0.6",
    "spec": ">=9.0.6 <10.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@apidevtools/swagger-parser"
  ],
  "_resolved": "https://registry.npmjs.org/@apidevtools/json-schema-ref-parser/-/json-schema-ref-parser-9.0.7.tgz",
  "_shasum": "64aa7f5b34e43d74ea9e408b90ddfba02050dde3",
  "_shrinkwrap": null,
  "_spec": "@apidevtools/json-schema-ref-parser@^9.0.6",
  "_where": "C:\\Users\\olani\\Desktop\\huroku Api\\node_modules\\@apidevtools\\swagger-parser",
  "author": {
    "name": "James Messinger",
    "url": "https://jamesmessinger.com"
  },
  "browser": {
    "fs": false
  },
  "bugs": {
    "url": "https://github.com/APIDevTools/json-schema-ref-parser/issues"
  },
  "contributors": [
    {
      "name": "Boris Cherny",
      "email": "boris@performancejs.com"
    }
  ],
  "dependencies": {
    "@jsdevtools/ono": "^7.1.3",
    "call-me-maybe": "^1.0.1",
    "js-yaml": "^3.13.1"
  },
  "description": "Parse, Resolve, and Dereference JSON Schema $ref pointers",
  "devDependencies": {
    "@babel/polyfill": "^7.12.1",
    "@jsdevtools/eslint-config": "^1.0.7",
    "@jsdevtools/host-environment": "^2.1.2",
    "@jsdevtools/karma-config": "^3.1.7",
    "@jsdevtools/version-bump-prompt": "^6.1.0",
    "@types/json-schema": "^7.0.6",
    "@types/node": "^14.14.21",
    "chai": "^4.2.0",
    "chai-subset": "^1.6.0",
    "eslint": "^7.18.0",
    "karma": "^5.0.2",
    "karma-cli": "^2.0.0",
    "mocha": "^8.2.1",
    "npm-check": "^5.9.0",
    "nyc": "^15.0.1",
    "shx": "^0.3.2",
    "typescript": "^4.0.5"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-QdwOGF1+eeyFh+17v2Tz626WX0nucd1iKOm6JUTUvCZdbolblCOOQCxGrQPY0f7jEhn36PiAWqZnsC2r5vmUWg==",
    "shasum": "64aa7f5b34e43d74ea9e408b90ddfba02050dde3",
    "tarball": "https://registry.npmjs.org/@apidevtools/json-schema-ref-parser/-/json-schema-ref-parser-9.0.7.tgz",
    "fileCount": 24,
    "unpackedSize": 148606,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgBWOyCRA9TVsSAnZWagAAC0gP/0RYITJHAn5IlJhiiPYJ\n7kdgeMi7zRD474zp0xpGqGAX97hGMKIF9phGsUkLL7DE/DGLdfxUc+bTMQOo\ns20joPlqUO06H4SfcNNJYz4W06XE+sO4X5W7t8hmoFsvFOcbG4oGRABUeUjW\nkJjLHGuFYzDpLlKub7Xa+EevcdogMLcKpSF2uRD4UaSoE5FEFm/eHBjSMTzu\nKjJfuv+DSjKS6qFcdAgdOmTBpRxwVOG2Gr2hjOfB+JHFbw0e+lPgWP1xUBLK\nSUK1ROPFlDKwC4oUuuaT2aZPClNSUpr/eru2xflRJ+2s8JSowZL67oK2XuyI\nbVW+vnt5jtAw/XNl2AQCt6yglEudipvBPUM8+Jq05HJLZFwSZMyCrSFDpnbD\nGTn9YLSdaYFuEVgSdRswI6eDKAbFq6eoEqieH3z9x2h3mdzQ1RKfOavXr3uG\n7lbwv1ySD6aHZJUJK5nOYx1/nN/KAVMavbPtP7d2Fbxn6bKTuZiB4unhfAEc\nam25IdrHE+1GQoGBByLzuiCftlfEn6rhz2sivOIVSw0h1M9u3+SZkoJXsYTE\nTb+14YQuy08F0pH2jJZ7l/1aM38zfbttKV9bs+7IcftbsAsowVR3gg021Eq6\nUCVXLiGsN/BJQX4RCHbQhMDXQLSQJuyUQJJKh++h1ir2fX2i2TPYhzqfisRi\nheBE\r\n=qEse\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "lib"
  ],
  "gitHead": "84c06eb9f36bc3df3142fe34adcbbfb35ef697f6",
  "homepage": "https://apitools.dev/json-schema-ref-parser/",
  "keywords": [
    "json",
    "schema",
    "jsonschema",
    "json-schema",
    "json-pointer",
    "$ref",
    "dereference",
    "resolve"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "philsturgeon",
      "email": "me@philsturgeon.uk"
    },
    {
      "name": "james_messinger",
      "email": "j.ames.messinger@gmail.com"
    },
    {
      "name": "jamesmessinger",
      "email": "james.messinger@gmail.com"
    }
  ],
  "name": "@apidevtools/json-schema-ref-parser",
  "optionalDependencies": {},
  "readme": "JSON Schema $Ref Parser\n============================\n#### Parse, Resolve, and Dereference JSON Schema $ref pointers\n\n[![Build Status](https://github.com/APIDevTools/json-schema-ref-parser/workflows/CI-CD/badge.svg?branch=master)](https://github.com/APIDevTools/json-schema-ref-parser/actions)\n[![Coverage Status](https://coveralls.io/repos/github/APIDevTools/json-schema-ref-parser/badge.svg?branch=master)](https://coveralls.io/github/APIDevTools/json-schema-ref-parser)\n\n[![npm](https://img.shields.io/npm/v/@apidevtools/json-schema-ref-parser.svg)](https://www.npmjs.com/package/@apidevtools/json-schema-ref-parser)\n[![Dependencies](https://david-dm.org/APIDevTools/json-schema-ref-parser.svg)](https://david-dm.org/APIDevTools/json-schema-ref-parser)\n[![License](https://img.shields.io/npm/l/@apidevtools/json-schema-ref-parser.svg)](LICENSE)\n[![Buy us a tree](https://img.shields.io/badge/Treeware-%F0%9F%8C%B3-lightgreen)](https://plant.treeware.earth/APIDevTools/json-schema-ref-parser)\n\n\n[![OS and Browser Compatibility](https://apitools.dev/img/badges/ci-badges-with-ie.svg)](https://github.com/APIDevTools/json-schema-ref-parser/actions)\n\n\nThe Problem:\n--------------------------\nYou've got a JSON Schema with `$ref` pointers to other files and/or URLs.  Maybe you know all the referenced files ahead of time.  Maybe you don't.  Maybe some are local files, and others are remote URLs.  Maybe they are a mix of JSON and YAML format.  Maybe some of the files contain cross-references to each other.\n\n```javascript\n{\n  \"definitions\": {\n    \"person\": {\n      // references an external file\n      \"$ref\": \"schemas/people/Bruce-Wayne.json\"\n    },\n    \"place\": {\n      // references a sub-schema in an external file\n      \"$ref\": \"schemas/places.yaml#/definitions/Gotham-City\"\n    },\n    \"thing\": {\n      // references a URL\n      \"$ref\": \"http://wayne-enterprises.com/things/batmobile\"\n    },\n    \"color\": {\n      // references a value in an external file via an internal reference\n      \"$ref\": \"#/definitions/thing/properties/colors/black-as-the-night\"\n    }\n  }\n}\n```\n\n\nThe Solution:\n--------------------------\nJSON Schema $Ref Parser is a full [JSON Reference](https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03) and [JSON Pointer](https://tools.ietf.org/html/rfc6901) implementation that crawls even the most complex [JSON Schemas](http://json-schema.org/latest/json-schema-core.html) and gives you simple, straightforward JavaScript objects.\n\n- Use **JSON** or **YAML** schemas &mdash; or even a mix of both!\n- Supports `$ref` pointers to external files and URLs, as well as [custom sources](https://apitools.dev/json-schema-ref-parser/docs/plugins/resolvers.html) such as databases\n- Can [bundle](https://apitools.dev/json-schema-ref-parser/docs/ref-parser.html#bundlepath-options-callback) multiple files into a single schema that only has _internal_ `$ref` pointers\n- Can [dereference](https://apitools.dev/json-schema-ref-parser/docs/ref-parser.html#dereferencepath-options-callback) your schema, producing a plain-old JavaScript object that's easy to work with\n- Supports [circular references](https://apitools.dev/json-schema-ref-parser/docs/#circular-refs), nested references, back-references, and cross-references between files\n- Maintains object reference equality &mdash; `$ref` pointers to the same value always resolve to the same object instance\n- Tested in Node and all major web browsers on Windows, Mac, and Linux\n\n\nExample\n--------------------------\n\n```javascript\n$RefParser.dereference(mySchema, (err, schema) => {\n  if (err) {\n    console.error(err);\n  }\n  else {\n    // `schema` is just a normal JavaScript object that contains your entire JSON Schema,\n    // including referenced files, combined into a single object\n    console.log(schema.definitions.person.properties.firstName);\n  }\n})\n```\n\nOr use `async`/`await` syntax instead. The following example is the same as above:\n\n```javascript\ntry {\n  let schema = await $RefParser.dereference(mySchema);\n  console.log(schema.definitions.person.properties.firstName);\n}\ncatch(err) {\n  console.error(err);\n}\n```\n\nFor more detailed examples, please see the [API Documentation](https://apitools.dev/json-schema-ref-parser/docs/)\n\n\n\nInstallation\n--------------------------\nInstall using [npm](https://docs.npmjs.com/about-npm/):\n\n```bash\nnpm install @apidevtools/json-schema-ref-parser\n```\n\n\n\nUsage\n--------------------------\nWhen using JSON Schema $Ref Parser in Node.js apps, you'll probably want to use **CommonJS** syntax:\n\n```javascript\nconst $RefParser = require(\"@apidevtools/json-schema-ref-parser\");\n```\n\nWhen using a transpiler such as [Babel](https://babeljs.io/) or [TypeScript](https://www.typescriptlang.org/), or a bundler such as [Webpack](https://webpack.js.org/) or [Rollup](https://rollupjs.org/), you can use **ECMAScript modules** syntax instead:\n\n```javascript\nimport $RefParser from \"@apidevtools/json-schema-ref-parser\";\n```\n\n\n\nBrowser support\n--------------------------\nJSON Schema $Ref Parser supports recent versions of every major web browser.  Older browsers may require [Babel](https://babeljs.io/) and/or [polyfills](https://babeljs.io/docs/en/next/babel-polyfill).\n\nTo use JSON Schema $Ref Parser in a browser, you'll need to use a bundling tool such as [Webpack](https://webpack.js.org/), [Rollup](https://rollupjs.org/), [Parcel](https://parceljs.org/), or [Browserify](http://browserify.org/). Some bundlers may require a bit of configuration, such as setting `browser: true` in [rollup-plugin-resolve](https://github.com/rollup/rollup-plugin-node-resolve).\n\n\n\nAPI Documentation\n--------------------------\nFull API documentation is available [right here](https://apitools.dev/json-schema-ref-parser/docs/)\n\n\n\nContributing\n--------------------------\nI welcome any contributions, enhancements, and bug-fixes.  [Open an issue](https://github.com/APIDevTools/json-schema-ref-parser/issues) on GitHub and [submit a pull request](https://github.com/APIDevTools/json-schema-ref-parser/pulls).\n\n#### Building/Testing\nTo build/test the project locally on your computer:\n\n1. __Clone this repo__<br>\n`git clone https://github.com/APIDevTools/json-schema-ref-parser.git`\n\n2. __Install dependencies__<br>\n`npm install`\n\n3. __Run the tests__<br>\n`npm test`\n\n\n\nLicense\n--------------------------\nJSON Schema $Ref Parser is 100% free and open-source, under the [MIT license](LICENSE). Use it however you want.\n\nThis package is [Treeware](http://treeware.earth). If you use it in production, then we ask that you [**buy the world a tree**](https://plant.treeware.earth/APIDevTools/json-schema-ref-parser) to thank us for our work. By contributing to the Treeware forest you’ll be creating employment for local families and restoring wildlife habitats.\n\n\n\nBig Thanks To\n--------------------------\nThanks to these awesome companies for their support of Open Source developers ❤\n\n[![Travis CI](https://jstools.dev/img/badges/travis-ci.svg)](https://travis-ci.com)\n[![SauceLabs](https://jstools.dev/img/badges/sauce-labs.svg)](https://saucelabs.com)\n[![Coveralls](https://jstools.dev/img/badges/coveralls.svg)](https://coveralls.io)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/APIDevTools/json-schema-ref-parser.git"
  },
  "scripts": {
    "bump": "bump --tag --push --all",
    "clean": "shx rm -rf .nyc_output coverage",
    "coverage": "npm run coverage:node && npm run coverage:browser",
    "coverage:browser": "npm run test:browser -- --coverage",
    "coverage:node": "nyc node_modules/mocha/bin/mocha",
    "lint": "eslint lib test/fixtures test/specs",
    "release": "npm run upgrade && npm run clean && npm test && npm run bump",
    "test": "npm run test:node && npm run test:typescript && npm run test:browser && npm run lint",
    "test:browser": "karma start --single-run",
    "test:node": "mocha",
    "test:typescript": "tsc --noEmit --strict --lib esnext,dom test/specs/typescript-definition.spec.ts",
    "upgrade": "npm-check -u && npm audit fix"
  },
  "typings": "lib/index.d.ts",
  "version": "9.0.7"
}
